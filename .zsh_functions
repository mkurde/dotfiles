#!/usr/bin/env bash

# Create a new directory and enter it
mkd() {
	mkdir -p "$@"
	cd "$@" || exit
}

# Make a temporary directory and enter it
tmpd() {
	local dir
	if [[ $# -eq 0 ]]; then
		dir="$(mktemp -d)"
	else
		dir="$(mktemp -d -t "${1}.XXXXXXXXXX")"
	fi
	cd "$dir" || exit
}

# Change working directory to the top-most Finder window location
cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" || exit;
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
	local tmpFile="${1%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "$1" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	${cmd} -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize="$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	)"

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi

	if [[ -n "$*" ]]; then
		du "$arg" -- "$@";
	else
		du "$arg" .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
#hash git &>/dev/null;
#if [ $? -eq 0 ]; then
#	diff() {
#		git diff --no-index --color-words "$@";
#	}
#fi;

# Create a data URL from a file
dataurl() {
	local mimeType
	mimeType="$(file -b --mime-type "$1")"

	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
gitio() {
	if [[ -z "$1" ]] || [[ -z "$2" ]]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i https://git.io/ -F "url=$2" -F "code=$1";
}

# Start an HTTP server from a directory, optionally specifying the port
server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Compare original and gzipped file size
gz() {
	local origsize
	origsize="$(wc -c < "$1")"
	local gzipsize
	gzipsize="$(gzip -c "$1" | wc -c)"
	local ratio
	ratio="$(echo "$gzipsize * 100 / $origsize" | bc -l)"

	printf "orig: %d bytes\\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
	if [[ -t 0 ]]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
escape() {
	printf "\\\\x%s" "$(printf "%s" "$*" | xxd -p -c1 -u)";
	# print a newline unless we’re piping the output to another program
	if [[ -t 1 ]]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$*\"";
	# print a newline unless we’re piping the output to another program
	if [[ -t 1 ]]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$*\"))";
	# print a newline unless we’re piping the output to another program
	if [[ -t 1 ]]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
	if [[ -z "$1" ]]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="$1";
	echo "Testing ${domain}…";
	echo #newline

	local tmp
	tmp="$(echo -e "GET / HTTP/1.0\\nEOT" | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)";

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText
		certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version")

		echo "Common Name:"
		echo # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
		echo # newline
		echo "Subject Alternative Name(s):"
		echo # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\\n" | tail -n +2

		return 0
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
#s() {
#	if [ $# -eq 0 ]; then
#		subl .;
#	else
#		subl "$@";
#	fi;
#}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
#a() {
#	if [ $# -eq 0 ]; then
#		atom .;
#	else
#		atom "$@";
#	fi;
#}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# iterm user vars
iterm2_print_user_vars() {
	iterm2_set_user_var kube_ps1_context "$(kubectl config current-context 2>/dev/null)"
	iterm2_set_user_var kube_ps1_namespace "$(kubectl config view --minify --output 'jsonpath={..namespace}' 2>/dev/null)"
	iterm2_set_user_var pwd "$(pwd)"
}

# new --------------------------------------------------------------------------

# https://mike.place/2017/fzf-fd/
function gssh {
	local machine="$(gcloud compute instances list | fzf | cut -f1 -d' ')"
	gcloud compute ssh "${machine}" --internal-ip
}

# Run `gh-release` to create a GitHub release of the current remote branch, default tier "edge"
# Usage: `gh-release` or `gh-release stage` or `gh-release prod`
# Requires: GitHub CLI gh
gh-release() {
	local repo;
	repo=$(git config --get remote.origin.url | sed -E 's/.*\:(.*)\.git/\1/g');
	echo "repo=${repo}"

	local branch;
	branch=$(git branch --show-current);
	echo "branch=${branch}"

	local tier="${1:-edge}";
	echo "tier=${tier}"

	local release;
	release=$(date -u "+%Y%m%dT%H%M%SZ-${tier}");
	echo "release=${release}"

	if [[ "${tier}" == "edge" ]] || [[ "${tier}" == "stage" ]]; then
		echo "Creating GitHub pre-release on ${tier}"
		gh release create "${release}" --prerelease --title "${release}" --notes '' --repo "${repo}" --target "${branch}"
	else
		echo "Creating GitHub release on ${tier}"
		gh release create "${release}" --title "${release}" --notes '' --repo "${repo}" --target "${branch}"
	fi

	echo "Find your workflow here: https://github.com/${repo}/actions"
}

k8s-restart() {
	local deployment=$1
	kubectl patch deployment ${deployment} -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"$(date +'%s')\"}}}}}"
}

function vif() {
	local file
	file=$(fzf --preview 'bat --style numbers,changes --color=always {} | head -500') || return
	${EDITOR} "${file}"
}

klogsfmt() {
	kubectl logs "$@" | tail -n +10 | jq -r '. | ">>> \(.timestampSeconds) \(.severity) \(.logger)\n\(.message)"'
}

# useful only for Mac OS Silicon M1,
# still working but useless for the other platforms
# https://stackoverflow.com/a/70288080/1161265
docker() {
	if [[ `uname -m` == "arm64" ]] && [[ "$1" == "run" || "$1" == "build" ]]; then
		/usr/local/bin/docker "$1" --platform linux/amd64 "${@:2}"
	else
		/usr/local/bin/docker "$@"
	fi
}

# Rebuild and fix terraform lock file for all the platforms
tf-lock() {
  terraform providers lock \
  -platform=linux_amd64 \
  -platform=darwin_amd64 \
  -platform=darwin_arm64 \
  -platform=windows_amd64
}

# decode base64 string
decode64 () {
  echo "$1" | base64 -d ; echo
}

kcron () {
	kubectl create job --from=cronjob/"$1" "$1"-"$(date -u "+%Y%m%d-%H%M%S")"
}
