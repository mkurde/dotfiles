#!/usr/bin/env bash

# https://mike.place/2017/fzf-fd/
function gssh {
  local machine="$(gcloud compute instances list | fzf | cut -f1 -d' ')"
  gcloud compute ssh "${machine}" --internal-ip
}

# Create a new directory and enter it
mkd() {
	mkdir -p "$@"
	cd "$@" || exit
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi

	if [[ -n "$*" ]]; then
		du "$arg" -- "$@";
	else
		du "$arg" .[^.]* ./*;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# Run `dig` and display the most useful info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
	if [[ -t 0 ]]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Start an HTTP server from a directory, optionally specifying the port
server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Make a temporary directory and enter it
tmpd() {
	local dir
	if [[ $# -eq 0 ]]; then
		dir="$(mktemp -d)"
	else
		dir="$(mktemp -d -t "${1}.XXXXXXXXXX")"
	fi
	cd "$dir" || exit
}

# Run `gh-release` to create a GitHub release of the current remote branch, default tier "edge"
# Usage: `gh-release` or `gh-release stage` or `gh-release prod`
# Requires: GitHub CLI gh
gh-release() {
	local repo;
	repo=$(git config --get remote.origin.url | sed -E 's/.*\:(.*)\.git/\1/g');

	local branch;
	branch=$(git branch --show-current);

	local tier="${1:-edge}";

	local release;
	release=$(date -u "+%Y%m%dT%H%M%SZ-${tier}");

	if [[ "${tier}" == "edge" ]] || [[ "${tier}" == "stage" ]]; then
		echo "Creating GitHub pre-release on ${tier}"
		gh release create "${release}" --prerelease --title "${release}" --notes '' --repo "${repo}" --target "${branch}"
	else
		echo "Creating GitHub release on ${tier}"
		gh release create "${release}" --title "${release}" --notes '' --repo "${repo}" --target "${branch}"
	fi

	echo "Find your workflow here: https://github.com/${repo}/actions"
}

k8s-restart() {
	local deployment=$1
	kubectl patch deployment ${deployment} -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"$(date +'%s')\"}}}}}"
}

function vif() {
  local file
  file=$(fzf --preview 'bat --style numbers,changes --color=always {} | head -500') || return
  "${EDITOR}" "${file}"
}

klogsfmt() {
	kubectl logs "$@" | tail -n +10 | jq -r '. | ">>> \(.timestampSeconds) \(.severity) \(.logger)\n\(.message)"'
}
