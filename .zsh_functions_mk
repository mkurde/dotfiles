#!/usr/bin/env bash

# Re-generates kubeconfigs for all Rancher clusters
function mk:rancher:kubeconfig:init() {
  readonly KUBE_CONFIG="$HOME/.kube/config"
  readonly KUBE_CONFIG_RANCHER="$HOME/.kube/rancher-config"
  local tmp_kubeconfig_path=""
  local configs_dir="$HOME/.kube/rancher.clusters"
  rm -rf "$configs_dir"
  mkdir -p "$configs_dir"
  log::info "Generating kubeconfig for Rancher clusters:"
  while read -r cluster_name cluster_id; do
    local kubeconfig_file="$configs_dir/$cluster_name.yaml"
    log::info "  - $cluster_name ($cluster_id)"
    if rancher cluster kubeconfig "$cluster_id" \
      | yq 'del(.current-context) | .contexts[0].name |= "rancher-" + .' >"$kubeconfig_file"; then
      tmp_kubeconfig_path="$kubeconfig_file:$tmp_kubeconfig_path"
    fi
  done < <(rancher cluster ls --format 'rancher-{{.Name}} {{.ID}}')

      # Backup existing kubeconfig
    if [ -f "$KUBE_CONFIG" ]; then
      log::info "Backing up existing kubeconfig at $KUBE_CONFIG"
      # Create backup file with the current date and time
      local timestamp
      timestamp=$(date +%Y%m%d-%H%M%S)
      readonly KUBE_CONFIG_BACKUP="$KUBE_CONFIG.$timestamp.bak"
    cp "$KUBE_CONFIG" "$KUBE_CONFIG_BACKUP"
    log::info "Created backup of current kubeconfig"
  else
    log::warn "No existing kubeconfig found at $KUBE_CONFIG"
  fi

  # Merge configs
  log::info "Merging kubeconfigs..."
  if KUBECONFIG="$tmp_kubeconfig_path" kubectl config view --flatten > "$KUBE_CONFIG_RANCHER"; then
    if KUBECONFIG="$KUBE_CONFIG_RANCHER:$KUBE_CONFIG" kubectl config view --flatten > "$KUBE_CONFIG.new"; then
      mv -f "$KUBE_CONFIG.new" "$KUBE_CONFIG"
    else
      log::error "Failed to merge kubeconfigs"
      exit 1
    fi
  else
    log::error "Failed to create Rancher kubeconfig"
    exit 1
  fi

}

# Zettelkasten

# Create a new Zettelkasten journal for the current month
function mk:zk:journal:new() {
  echo "todo"
}

# Create a new Zettelkasten note
function mk:zk:note:new() {
  local title="$*"
  zk new --working-dir "${ZK_NOTEBOOK_DIR}" --title="${title}"
}
# Create a new work Zettelkasten note
function mk:zk:note:work:new() {
  local title="$*"
  zk new --working-dir "${ZK_NOTEBOOK_DIR}/work" --title="${title}"
}


# Kubernetes

# Start a Job of a CronJob
mk:k8s:cron () {
	kubectl create job --from=cronjob/"$1" "$1-mk-$(date -u "+%Y%m%d-%H%M%S")"
}
# Disable a CronJob
mk:k8s:cron:suspend () {
	kubectl patch cronjob "$1" -p '{"spec":{"suspend":true}}'
}
# Resume a suspended CronJob
mk:k8s:cron:resume () {
  kubectl patch cronjob "$1" -p '{"spec":{"suspend":false}}'
}

# Git

# Clone a git repository
mk:git:clone() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: mk:git:clone <git-url> or mk:git:clone <org/repo>"
        echo "Examples:"
        echo "  mk:git:clone git@github.com:trivago/mars-image-overlay.git"
        echo "  mk:git:clone trivago/mars-image-overlay"
        return 1
    fi

    local input=$1
    local url
    local repo_path

    # Check if input looks like a full URL
    if [[ "$input" =~ git@github.com: ]] || [[ "$input" =~ https://github.com/ ]]; then
        url="$input"
        # Extract path from URL
        if [[ "$url" =~ git@github.com: ]]; then
            # Remove git@github.com: prefix and .git suffix
            repo_path="github.com/$(echo "$url" | sed 's|git@github.com:||' | sed 's|\.git$||')"
        elif [[ "$url" =~ https://github.com/ ]]; then
            # Remove https://github.com/ prefix and .git suffix
            repo_path="github.com/$(echo "$url" | sed 's|https://github.com/||' | sed 's|\.git$||')"
        fi
    else
        # Assume it's org/repo format
        url="git@github.com:${input}.git"
        repo_path="github.com/${input}"
    fi

    local base_dir="$HOME/workspace/src/$repo_path"
    local target_dir="$base_dir"
    local should_clone=true

    # Check if directory already exists
    if [[ -d "$target_dir" ]]; then
        echo "Repository already exists at: $target_dir"
        echo -n "Clone again in a numbered folder? (y/n): "
        read -r response

        if [[ "$response" =~ ^[Yy]$ ]]; then
            local counter
            local repo_name
            local parent_dir
            counter=1
            repo_name=$(basename "$repo_path")
            parent_dir=$(dirname "$base_dir")

            # Find the next available number
            while [[ -d "${parent_dir}/${repo_name}_${counter}" ]]; do
                ((counter++))
            done

            target_dir="${parent_dir}/${repo_name}_${counter}"
            echo "Cloning into: $target_dir"
        else
            should_clone=false
        fi
    fi

    if [[ "$should_clone" == true ]]; then
        echo "Cloning $url into $target_dir"
        if git clone "$url" "$target_dir"; then
            echo "‚úÖ Successfully cloned!"
        else
            echo "‚ùå Failed to clone repository"
            return 1
        fi
    fi

    echo "üìÅ Switching to: $target_dir"
    cd "$target_dir" || return 1
}
